/*
 * -------------------------------------------------
 *  peterk87/nf-ionampliseq Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Global default params, used in configs
params {
  // Workflow flags
  input = null
  sample_sheet = null
  rundir = null
  outdir = './results'
  publish_dir_mode = 'copy'
  panel = null
  panels {
    'csf' {
      fasta = "$baseDir/data/csf/CSFV_AmpliSeq.fasta"
      bed_file = "$baseDir/data/csf/WG00242.20170223.designed.bed"
    }
    'fmd' {
      fasta = "$baseDir/data/fmd/FMDV_AmpliSeq_WG0022620160728referenceSequences.fasta"
      bed_file = "$baseDir/data/fmd/WG00226.20160728.Designed.gc.bed"
    }
  }
  ref_fasta = null
  bed_file = null
  tvc_error_motifs_dir = "$baseDir/data/tvc-sse"
  mash_k = 19
  mash_s = 10000
  tvc_read_limit = 4000000
  tvc_downsample_to_coverage = 8000
  tvc_min_mapping_qv = 0
  tvc_read_snp_limit = 20
  low_coverage = 1
  no_coverage = 0
  low_cov_char = 'N'
  no_cov_char = 'N'

  // Slurm cluster scheduler options
  slurm_queue = null
  slurm_queue_size = 100

  // Boilerplate options
  name = false
  multiqc_config = false
  email = false
  email_on_fail = false
  max_multiqc_email_size = 25.MB
  plaintext_email = false
  monochrome_logs = false
  help = false
  tracedir = "${params.outdir}/pipeline_info"
  custom_config_version = 'master'
  custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
  hostnames = false
  config_profile_description = false
  config_profile_contact = false
  config_profile_url = false

  // Defaults only, expecting to be overwritten
  max_memory = 128.GB
  max_cpus = 16
  max_time = 240.h

}

// Container slug. Stable releases should specify release tag!
// Developmental code should specify :dev
process.container = 'peterk87/nf-ionampliseq:1.0.0'

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
  includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
  System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

profiles {
  conda { process.conda = "$baseDir/environment.yml" }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  docker {
    docker.enabled = true
    // Avoid this error:
    //   WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
    // Testing this in nf-core after discussion here https://github.com/nf-core/tools/pull/351
    // once this is established and works well, nextflow might implement this behavior as new default.
    docker.runOptions = '-u \$(id -u):\$(id -g)'
  }
  singularity {
    singularity.enabled = true
    singularity.autoMounts = true
  }
  slurm { includeConfig 'conf/slurm.config'}
  test { includeConfig 'conf/test.config' }
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
  PYTHONNOUSERSITE = 1
  R_PROFILE_USER = "/.Rprofile"
  R_ENVIRON_USER = "/.Renviron"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}

manifest {
  name = 'peterk87/nf-ionampliseq'
  author = 'Peter Kruczkiewicz'
  homePage = 'https://github.com/peterk87/nf-ionampliseq'
  description = 'Ion Torrent Ampliseq workflow for analysis of FMDV, CSFV, Zika, Ebola amplicon sequence data'
  mainScript = 'main.nf'
  nextflowVersion = '>=20.04.0'
  version = '1.0.0'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
